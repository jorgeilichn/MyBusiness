// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBusiness_DB;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyBusiness_DB.Migrations
{
    [DbContext(typeof(BusinessContext))]
    [Migration("20250527155654_NullableFields")]
    partial class NullableFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyBusiness_DB.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BrandId"));

                    b.Property<bool>("BrandActive")
                        .HasColumnType("boolean");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BrandId");

                    b.ToTable("Brand", "store");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandActive = false,
                            BrandName = "Otro"
                        },
                        new
                        {
                            BrandId = 2,
                            BrandActive = false,
                            BrandName = "Bravo"
                        },
                        new
                        {
                            BrandId = 3,
                            BrandActive = false,
                            BrandName = "Dos coronas"
                        },
                        new
                        {
                            BrandId = 4,
                            BrandActive = false,
                            BrandName = "Gouda"
                        });
                });

            modelBuilder.Entity("MyBusiness_DB.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("OrderStatus")
                        .HasColumnType("boolean");

                    b.HasKey("OrderId");

                    b.ToTable("Order", "store");
                });

            modelBuilder.Entity("MyBusiness_DB.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductID"));

                    b.Property<int>("BrandID")
                        .HasColumnType("integer");

                    b.Property<bool>("ProductActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("text");

                    b.Property<string>("ProductImage")
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("UnitOfMeasurementID")
                        .HasColumnType("integer");

                    b.HasKey("ProductID");

                    b.HasIndex("BrandID");

                    b.HasIndex("UnitOfMeasurementID");

                    b.ToTable("Product", "store");
                });

            modelBuilder.Entity("MyBusiness_DB.Models.ProductByOrder", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("integer");

                    b.Property<int>("ProductID")
                        .HasColumnType("integer");

                    b.Property<bool>("ProductByOrderActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductByOrder", "store");
                });

            modelBuilder.Entity("MyBusiness_DB.Models.UnitOfMeasurement", b =>
                {
                    b.Property<int>("UnitOfMeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UnitOfMeasurementId"));

                    b.Property<bool>("UnitOfMeasurementActive")
                        .HasColumnType("boolean");

                    b.Property<string>("UnitOfMeasurementInitials")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitOfMeasurementName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UnitOfMeasurementId");

                    b.ToTable("UnitOfMeasurement", "store");

                    b.HasData(
                        new
                        {
                            UnitOfMeasurementId = 1,
                            UnitOfMeasurementActive = false,
                            UnitOfMeasurementInitials = "U",
                            UnitOfMeasurementName = "Unidad"
                        },
                        new
                        {
                            UnitOfMeasurementId = 2,
                            UnitOfMeasurementActive = false,
                            UnitOfMeasurementInitials = "Kg",
                            UnitOfMeasurementName = "Kilogramo"
                        },
                        new
                        {
                            UnitOfMeasurementId = 3,
                            UnitOfMeasurementActive = false,
                            UnitOfMeasurementInitials = "g",
                            UnitOfMeasurementName = "Gramo"
                        },
                        new
                        {
                            UnitOfMeasurementId = 4,
                            UnitOfMeasurementActive = false,
                            UnitOfMeasurementInitials = "Lb",
                            UnitOfMeasurementName = "Libra"
                        },
                        new
                        {
                            UnitOfMeasurementId = 5,
                            UnitOfMeasurementActive = false,
                            UnitOfMeasurementInitials = "m",
                            UnitOfMeasurementName = "Metro"
                        },
                        new
                        {
                            UnitOfMeasurementId = 6,
                            UnitOfMeasurementActive = false,
                            UnitOfMeasurementInitials = "cm",
                            UnitOfMeasurementName = "Centímetro"
                        },
                        new
                        {
                            UnitOfMeasurementId = 7,
                            UnitOfMeasurementActive = false,
                            UnitOfMeasurementInitials = "ml",
                            UnitOfMeasurementName = "Mililitro"
                        },
                        new
                        {
                            UnitOfMeasurementId = 8,
                            UnitOfMeasurementActive = false,
                            UnitOfMeasurementInitials = "L",
                            UnitOfMeasurementName = "Litro"
                        });
                });

            modelBuilder.Entity("MyBusiness_DB.Models.Product", b =>
                {
                    b.HasOne("MyBusiness_DB.Models.Brand", null)
                        .WithMany("Products")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBusiness_DB.Models.UnitOfMeasurement", null)
                        .WithMany("Products")
                        .HasForeignKey("UnitOfMeasurementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBusiness_DB.Models.ProductByOrder", b =>
                {
                    b.HasOne("MyBusiness_DB.Models.Order", null)
                        .WithMany("ProductByOrders")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBusiness_DB.Models.Product", null)
                        .WithMany("ProductByOrders")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBusiness_DB.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBusiness_DB.Models.Order", b =>
                {
                    b.Navigation("ProductByOrders");
                });

            modelBuilder.Entity("MyBusiness_DB.Models.Product", b =>
                {
                    b.Navigation("ProductByOrders");
                });

            modelBuilder.Entity("MyBusiness_DB.Models.UnitOfMeasurement", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
