// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBusiness_DB;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyBusiness_DB.Migrations
{
    [DbContext(typeof(BusinessContext))]
    [Migration("20250524160427_CreateSchemaTestEntity")]
    partial class CreateSchemaTestEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyBusiness_DB.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .HasColumnType("text");

                    b.HasKey("BrandId");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("MyBusiness_DB.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductID"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("numeric");

                    b.Property<int?>("UnitOfMeasurementId")
                        .HasColumnType("integer");

                    b.HasKey("ProductID");

                    b.HasIndex("BrandId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("MyBusiness_DB.Models.SchemaTest", b =>
                {
                    b.Property<int>("SchemaTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SchemaTestId"));

                    b.Property<string>("SchemaTestName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SchemaTestId");

                    b.ToTable("SchemaTest", "store");
                });

            modelBuilder.Entity("MyBusiness_DB.Models.UnitOfMeasurement", b =>
                {
                    b.Property<int>("UnitOfMeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UnitOfMeasurementId"));

                    b.Property<string>("UnitOfMeasurementInitials")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitOfMeasurementName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UnitOfMeasurementId");

                    b.ToTable("UnitOfMeasurement", (string)null);
                });

            modelBuilder.Entity("MyBusiness_DB.Models.Product", b =>
                {
                    b.HasOne("MyBusiness_DB.Models.Brand", null)
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("MyBusiness_DB.Models.UnitOfMeasurement", null)
                        .WithMany("Products")
                        .HasForeignKey("UnitOfMeasurementId");
                });

            modelBuilder.Entity("MyBusiness_DB.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBusiness_DB.Models.UnitOfMeasurement", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
